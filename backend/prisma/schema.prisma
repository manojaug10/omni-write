// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  socialConnections SocialConnection[]
  scheduledTweets   ScheduledTweet[]
  scheduledThreads  ScheduledThread[]
}

model SocialConnection {
  id                   String    @id @default(cuid())
  provider             String // e.g., "THREADS"
  providerUserId       String
  accessToken          String    @db.Text
  accessTokenExpiresAt DateTime?
  refreshToken         String?   @db.Text
  username             String?
  metadata             Json?     // Store provider-specific data (e.g., subscription_type for X)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerUserId])
  @@unique([provider, userId])
}

enum ScheduledTweetStatus {
  QUEUED
  POSTED
  FAILED
  CANCELLED
}

model ScheduledTweet {
  id           String                @id @default(cuid())
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  provider     String                @default("X")
  text         String
  scheduledAt  DateTime
  status       ScheduledTweetStatus  @default(QUEUED)
  postedTweetId String?
  errorMessage String?               @db.Text
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

enum ScheduledThreadStatus {
  QUEUED
  POSTED
  FAILED
  CANCELLED
}

model ScheduledThread {
  id           String                 @id @default(cuid())
  user         User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  provider     String                 @default("X")
  tweets       String[]               // Array of tweet texts in the thread
  scheduledAt  DateTime
  status       ScheduledThreadStatus  @default(QUEUED)
  postedThreadId String?              // First tweet ID (represents the thread)
  postedTweetIds String[]             // All posted tweet IDs
  errorMessage String?                @db.Text
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
}
